linear search(선형검색) = sequential search(순차검색): 선형으로 늘어선 배열에서 검색하는 경우, 앞부터 순서대로 스캔하는 알고리즘
=> 정렬되지 않은 배열에서 검색할 때 사용하는 유일한 방법

sentinel method(보초법): 선형검색에서 마지막 종료조건(key가 없는경우)에 들어가는 비용을 줄여주는 방법

binary search(이진검색): 원소가 오름/내림차순으로 정렬된 배열에서 일종의 업다운 게임 방식으로 scan해야할 범위를 줄여가며 검색하는 방식

complexity(복잡도): 알고리즘의 성능을 객관적으로 평가하는 기준
time complexity(시간 복잡도): 실행하는 데 필요한 시간 평가
space complexity(공간 복잡도): 메모리와 파일 공간이 얼마나 필요한지 평가
=> 표기는 O(n), '오더 n', 'n의 오더'라고 읽음
=> 복잡도의 차원은 높은 곳을 따라감 => O(f(n)) + O(g(n)) = O(max(f(n), g(n)))

hashing(해시법): 데이터를 저장할 인덱스를 간단한 연산으로 설정하는 방법. 이를통해 데이터 검색/추가/삭제에 들어가는 비용을 줄임
hash value(해시값): 해시법을 실행하기 위해 원래 키값에 간단한 연산을 통해 얻어낸 인덱스
hash table(해시테이블): 해시값을 인덱스로하여 원소들을 새롭게 정렬해놓은 배열
hash function(해시함수): key를 hash값으로 바꿔주는 함수(로직) => 주로 나머지를 구하는 연산이나 그 응요을 사용함
bucket(버킷): 해시 테이블에서 만들어진 원소
hash collision(해시충돌): 서로 다른 키의 해시값이 같아 중복되는 현상

chaining(체인법)=open hashing(오픈해시법): 해시값이 같은 데이터를 linked list(연결리스트)로 관리하는 방법
open addressing(오픈주소법)=closed hashing(닫힌해시법)=linear probing(선형탐사법): 충돌이 발생했을 때 재해시를 통해 빈 버킷을 찾는 방법
