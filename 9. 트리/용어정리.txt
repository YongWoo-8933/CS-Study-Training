node(노드): 트리에서 원소에 해당하는 부분
edge(가지): 트리에서 연결 관계를 나타내는 부분
root(루트): 트리의 가장 위쪽에 있는 노드
leaf(리프) = terminal node(단말노드) = external node(외부노드): 가장 아래쪽에 위치한 노드
non-terminal node(비단말노드) = internal node(내부노드): 리프를 제외한 노드
child(자식): 두 노드가 가지로 연결되었을 때 아래쪽 노드
parent(부모): 두 노드가 가지로 연결되었을 때 위쪽 노드, 모든 노드의 부모는 한개 뿐임
sibling(형제): 부모가 같은 노드들
ancestor(조상): 한 노드에서 위쪽 가지를 따라가면 만나는 모든 노드들
descendant(자손): 한 노드에서 아래쪽 가지를 따라가면 만나는 모든 노드들
level(레벨): 루트에서 얼마나 멀리 떨어져 있는지를 나타낸 것, 루트의 레벨은 0
degree(차수): 노드가 갖는 자식의 수
n진트리: 모든 노드의 차수가 n이하인 트리
height(높이): 리프 레벨의 최댓값
subtree(서브트리): 트리의 일부로, 한 노드를 루트로 다시 구성되는 트리
None tree(빈트리) = null tree(널트리): 노드와 가지가 전혀 없는 트리
ordered tree(순서트리): 형제 노드의 순서 관계가 있는 트리(ex 작은값이 왼쪽)
unordered tree(무순서트리): 형제 노드의 순서 관계가 없는 트리

Breadth-First-Search(너비우선검색=폭우선검색=가로검색=수평검색): 낮은 레벨의 노드부터 검색하고, 한 레벨 검색이 끝나면 다음 레벨로 내려가는 방법
Depth-First-Search(깊이우선검색=세로검색=수직검색): 리프에 도달할 때까지 아래쪽으로 내려가면서 검색하고, 리프에 도달하면 일단 부모 노드로 돌아가 다른 자식 노드 검색

preorder(전위순회): 노드방문 -> 왼쪽자식 -> 오른쪽자식 순으로 진행
inorder(중위순회): 왼쪽자식 -> 노드방문 -> 오른쪽자식 순으로 진행
postorder(후위순회): 왼쪽자식 -> 오른쪽자식 -> 노드방문 순으로 진행

binary tree(이진트리): 모든 노드의 차수가 2 이하인 트리
left subtree(왼쪽서브트리): 이진트리에서 왼쪽 자식을 루트로 하는 서브트리
right subtree(오른쪽서브트리): 이진트리에서 오른쪽 자식을 루트로 하는 서브트리
complete binary tree(완전이진트리): 루트부터 아래쪽으로, 왼쪽에서 오른쪽으로 노드가 모두 채워져 있는 이진트리, 단 리프에서는 모든 노드가 채워지지 않아도 됨
=> N개의 노드를 저장할 수 있는 완전이진트리의 높이는 logN

binary search tree(이진검색트리): 모든 노드가 아래 두 조건을 만족하는 트리
=> 1. 왼쪽 서브트리 노드의 키값은 자신의 노드 키값보다 작다
=> 2. 오른쪽 서브트리 노드의 키값은 자신의 노드 키값보다 크다
=> 구조가 단순함
=> 중위순회의 DFS를 통해 노드값을 오름차순으로 얻을 수 있음
=> 아주 빠르게 검색 가능
=> 노드를 삽입하기 쉬움