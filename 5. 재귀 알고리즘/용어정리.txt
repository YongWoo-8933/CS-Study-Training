recursion(재귀): 어떠한 이벤트에서 자기 자신을 포함하고 다시 자기 자신을 사용하여 정의되는 경우
direct recursion(직접재귀): 자신과 똑같은 함수를 호출하는 방식
indirect recursion(간접재귀): a->b->a순으로 다시 호출하는 방식

유클리드 호제법: 두 정수에서, 큰 값을 작은 값으로 나누는 과정을 재귀적으로 반복해 최대공약수을 구하는 방식

재귀 알고리즘의 하향식(top-down) 분석: 로직의 상단부터 차례로 분석해나가는 방법 
-> 같은 함수를 여러번 호출할 수 있어 효율적이지 않을 수 있음
재귀 알고리즘의 상향식(bottom-up) 분석: 로직의 하단부터 쌓아 올리며 분석해나가는 방법
-> 같은 함수를 여러번 호출할 필요가 없음

재귀 함수의 재귀성 제거: Stack을 활용하면 가능

branching(분기작업): 가지를 뻗어나가듯 배치 조합을 열거하는 방법
분할 정복법=분할 해결법: 큰문제를 작은문제로 분기하여 작은 문제 풀이법을 결합해 큰 문제를 푸는 방법
bounding(한정작업): 필요하지 않은 분기를 제거해 한정하는 작업
분기 한정법: 분기 작업과 한정 작업을 조합하여 문제를 푸는 방법


